{"version":3,"sources":["components/Scroll.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Scroll","props","react_default","a","createElement","lib","style","padding","height","border","borderRadius","children","Card","_ref","id","name","email","className","src","concat","alt","CardList","robots","cardsArray","map","user","i","components_Card","key","SearchBox","searchField","searchChange","marginBottom","type","placeholder","onChange","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","wordSpacing","Component","App","onSearchChange","event","target","value","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLocaleLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.11fbf1ca.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    // Add styles to make this div scrollable so the search box always remains at the top \r\n    // <div style={{ overflowY: \"scroll\", border: \"5px solid lightgreen\", height: \"420px\", padding: \"20px\" }}>\r\n    //   {props.children}\r\n    // </div>\r\n    <div>\r\n      <Scrollbars style={{ padding: \"20px !important\", height: 420, border: \"5px solid lightgreen\", borderRadius: \"10px\" }}>\r\n        { props.children }\r\n      </Scrollbars>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n\r\n  return (\r\n\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${id}?size=150x150`} alt= { `Agent ${name}` } />\r\n      <div>\r\n        <h3>{name}</h3>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n  // To check error handling with ErrorBoundary component \r\n  // if(true) {\r\n  //   throw new Error('Error checking to see if ErrorBoundary works lol!');\r\n  // }\r\n\r\n  const cardsArray = robots.map((user, i) => {\r\n    return (\r\n      <Card \r\n        id={robots[i].id} \r\n        key={robots[i].id} \r\n        name={robots[i].name} \r\n        email={robots[i].email} \r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      { cardsArray }\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input \r\n        style={{ marginBottom: \"20px\" }} \r\n        className=\"pa3 ma2 ba b--green bg-lightest-blue tc\"\r\n        type=\"search\" \r\n        placeholder=\"Search Robots\" \r\n        onChange={searchChange} \r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    \r\n    if(this.state.hasError) {\r\n      return(\r\n        <h1 style={{ wordSpacing: \"10px\" }}>Looks like we did an oopsie...</h1>\r\n      );\r\n    }\r\n    \r\n    else { return this.props.children }\r\n    // this.props.children is CardList component because we wrapped CardList inside the ErrorBoundary component \r\n  }\r\n\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport Scroll from '../components/Scroll';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n// import { robots } from './robots'; //commented out because using fetch to get real data instead of hardcoded \r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  // Adding state\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      // robots: robots, //commented out because using fetch \r\n      robots: [],\r\n      searchField: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    \r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => this.setState({ robots: users }));\r\n\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchField: event.target.value });\r\n  }\r\n\r\n  render() {\r\n\r\n    const { robots, searchField } = this.state;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase())\r\n    });\r\n    // console.log(filteredRobots);\r\n\r\n    if(!robots.length) {\r\n      return <h2>LOADING...</h2>\r\n    }\r\n    else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <div>\r\n          <h1 className=\"f1\">RoboFriends</h1>\r\n          <SearchBox searchChange={this.onSearchChange} />\r\n          </div>\r\n          <Scroll>\r\n            <ErrorBoundary>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundary>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'tachyons';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}