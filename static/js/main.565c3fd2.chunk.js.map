{"version":3,"sources":["Scroll.js","Card.js","CardList.js","SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Scroll","props","react_default","a","createElement","lib","style","padding","height","border","borderRadius","children","Card","_ref","id","name","email","className","src","concat","alt","CardList","robots","cardsArray","map","user","i","src_Card","key","SearchBox","searchField","searchChange","marginBottom","type","placeholder","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this3","filteredRobots","filter","toLocaleLowerCase","includes","src_SearchBox","src_Scroll","src_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2QAiBeA,EAdA,SAACC,GACd,OAKEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,WAAD,CAAYC,MAAO,CAAEC,QAAS,kBAAmBC,OAAQ,IAAKC,OAAQ,uBAAwBC,aAAc,SACxGT,EAAMU,YCMDC,EAfF,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,GAAIC,EAAkBF,EAAlBE,KAAMC,EAAYH,EAAZG,MAExB,OAEEd,EAAAC,EAAAC,cAAA,OAAKa,UAAU,uDACbf,EAAAC,EAAAC,cAAA,OAAKc,IAAG,wBAAAC,OAA0BL,EAA1B,iBAA6CM,IAAG,SAAAD,OAAaJ,KACrEb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKW,GACLb,EAAAC,EAAAC,cAAA,SAAIY,MCcGK,EArBE,SAAAR,GAAgB,IAAbS,EAAaT,EAAbS,OAEZC,EAAaD,EAAOE,IAAI,SAACC,EAAMC,GACnC,OACExB,EAAAC,EAAAC,cAACuB,EAAD,CACEb,GAAIQ,EAAOI,GAAGZ,GACdc,IAAKN,EAAOI,GAAGZ,GACfC,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,UAKvB,OACEd,EAAAC,EAAAC,cAAA,WACImB,ICFOM,EAdG,SAAAhB,GAAmCA,EAAhCiB,YAAgC,IAAnBC,EAAmBlB,EAAnBkB,aAChC,OACE7B,EAAAC,EAAAC,cAAA,OAAKa,UAAU,OACbf,EAAAC,EAAAC,cAAA,SACEE,MAAO,CAAE0B,aAAc,QACvBf,UAAU,0CACVgB,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MC4CHK,qBA5Cb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAgBFI,eAAiB,SAACC,GAEhBR,EAAKS,SAAS,CAAEhB,YAAae,EAAME,OAAOC,SAjB1CX,EAAKY,MAAQ,CAEX3B,OAAQ,GACRQ,YAAa,IALHO,mFASM,IAAAa,EAAAV,KAElBW,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKJ,SAAS,CAAExB,OAAQiC,uCAUlC,IAAAC,EAAAhB,KAEDiB,EAAiBjB,KAAKS,MAAM3B,OAAOoC,OAAO,SAAApC,GAC9C,OAAOA,EAAOP,KAAK4C,oBAAoBC,SAASJ,EAAKP,MAAMnB,YAAY6B,uBAIzE,OACEzD,EAAAC,EAAAC,cAAA,OAAKa,UAAU,MACbf,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAIa,UAAU,MAAd,eACAf,EAAAC,EAAAC,cAACyD,EAAD,CAAW9B,aAAcS,KAAKI,kBAE9B1C,EAAAC,EAAAC,cAAC0D,EAAD,KACE5D,EAAAC,EAAAC,cAAC2D,EAAD,CAAUzC,OAAQmC,aAxCVO,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOrE,EAAAC,EAAAC,cAACoE,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.565c3fd2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    // Add styles to make this div scrollable so the search box always remains at the top \r\n    // <div style={{ overflowY: \"scroll\", border: \"5px solid lightgreen\", height: \"420px\", padding: \"20px\" }}>\r\n    //   {props.children}\r\n    // </div>\r\n    <div>\r\n      <Scrollbars style={{ padding: \"20px !important\", height: 420, border: \"5px solid lightgreen\", borderRadius: \"10px\" }}>\r\n        { props.children }\r\n      </Scrollbars>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n\r\n  return (\r\n\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${id}?size=150x150`} alt= { `Agent ${name}` } />\r\n      <div>\r\n        <h3>{name}</h3>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n  const cardsArray = robots.map((user, i) => {\r\n    return (\r\n      <Card \r\n        id={robots[i].id} \r\n        key={robots[i].id} \r\n        name={robots[i].name} \r\n        email={robots[i].email} \r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      { cardsArray }\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input \r\n        style={{ marginBottom: \"20px\" }} \r\n        className=\"pa3 ma2 ba b--green bg-lightest-blue tc\"\r\n        type=\"search\" \r\n        placeholder=\"Search Robots\" \r\n        onChange={searchChange} \r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\nimport Scroll from './Scroll';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\n// import { robots } from './robots'; //commented out because using fetch to get real data instead of hardcoded \r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  // Adding state\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      // robots: robots, //commented out because using fetch \r\n      robots: [],\r\n      searchField: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    \r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => this.setState({ robots: users }));\r\n\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n\r\n    this.setState({ searchField: event.target.value });\r\n    \r\n  }\r\n\r\n  render() {\r\n\r\n    const filteredRobots = this.state.robots.filter(robots => {\r\n      return robots.name.toLocaleLowerCase().includes(this.state.searchField.toLocaleLowerCase())\r\n    });\r\n    // console.log(filteredRobots);\r\n\r\n    return (\r\n      <div className=\"tc\">\r\n        <div>\r\n        <h1 className=\"f1\">RoboFriends</h1>\r\n        <SearchBox searchChange={this.onSearchChange} />\r\n        </div>\r\n        <Scroll>\r\n          <CardList robots={filteredRobots} />\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}